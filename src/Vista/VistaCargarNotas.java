package Vista;

import Modelo.Alumno;
import Modelo.Inscripcion;
import Modelo.Materia;
import Persistencia.AlumnoData;
import Persistencia.InscripcionData;
import Persistencia.MateriaData;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class VistaCargarNotas extends javax.swing.JInternalFrame {

    private AlumnoData alumnoData;
    private MateriaData materiaData;
    private InscripcionData inscripcionData;

    public VistaCargarNotas(AlumnoData alumnoData, MateriaData materiaData, InscripcionData inscripcionData) {
        initComponents();
        this.alumnoData = alumnoData;
        this.materiaData = materiaData;
        this.inscripcionData = inscripcionData;

        cargarComboAlumnos();

        // Configuraci√≥n de la ventana interna
        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDesktopPane1 = new javax.swing.JDesktopPane();
        jcbAlumno = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtMaterias = new javax.swing.JTable();
        jbGuardarCambios = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);

        jDesktopPane1.setBackground(new java.awt.Color(255, 255, 255));

        jcbAlumno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbAlumnoActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(153, 0, 153));
        jLabel2.setText(" Alumno :");

        jtMaterias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID.materia", "Nombre", "Nota"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jtMaterias);

        jbGuardarCambios.setBackground(new java.awt.Color(0, 0, 0));
        jbGuardarCambios.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jbGuardarCambios.setForeground(new java.awt.Color(153, 0, 153));
        jbGuardarCambios.setText("Guardar Cambios");
        jbGuardarCambios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbGuardarCambiosActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(153, 0, 153));
        jLabel1.setText("Cargar notas");

        jDesktopPane1.setLayer(jcbAlumno, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jLabel2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jbGuardarCambios, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addGap(85, 85, 85)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(jcbAlumno, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDesktopPane1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jbGuardarCambios)
                .addGap(163, 163, 163))
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 498, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDesktopPane1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcbAlumno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(67, 67, 67)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addComponent(jbGuardarCambios, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(74, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jcbAlumnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbAlumnoActionPerformed
        cargarMateriasConNotas();
    }//GEN-LAST:event_jcbAlumnoActionPerformed

    private void jbGuardarCambiosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbGuardarCambiosActionPerformed
        guardarNotas();
    }//GEN-LAST:event_jbGuardarCambiosActionPerformed

    private void cargarComboAlumnos() {
        // llena el combo con los nombres de los alumnos
        if (alumnoData == null) {
            return;
        }
        List<Alumno> lista = alumnoData.obtenerTodosLosAlumnos();
        jcbAlumno.removeAllItems();
        for (Alumno a : lista) {
            jcbAlumno.addItem(a.getApellido() + ", " + a.getNombre());
        }
    }

    private void cargarMateriasConNotas() {
        int alumnoIndex = jcbAlumno.getSelectedIndex();
        if (alumnoIndex < 0) {
            return;
        }

        Alumno alumno = alumnoData.obtenerTodosLosAlumnos().get(alumnoIndex);

        //usa obtenerTodasLasInscripciones() y filtra
        List<Inscripcion> todasInscripciones = inscripcionData.obtenerTodasLasInscripciones();
        List<Inscripcion> inscripcionesAlumno = new ArrayList<>();

        for (Inscripcion inscripcion : todasInscripciones) {
            if (inscripcion.getAlumno().getIdAlumno() == alumno.getIdAlumno()) {
                inscripcionesAlumno.add(inscripcion);
            }
        }

        DefaultTableModel modelo = new DefaultTableModel(
                new Object[][]{},
                new String[]{"ID.materia", "Nombre", "Nota"}
        ) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return column == 2;
            }

            @Override
            public Class<?> getColumnClass(int columnIndex) {
                if (columnIndex == 0) {
                    return Integer.class;
                }
                if (columnIndex == 2) {
                    return Integer.class;
                }
                return String.class;
            }
        };
        jtMaterias.setModel(modelo);

        for (Inscripcion inscripcion : inscripcionesAlumno) {
            Materia materia = inscripcion.getMateria();
            modelo.addRow(new Object[]{
                materia.getIdMateria(),
                materia.getNombre(),
                inscripcion.getNota()
            });
        }
    }

    private void guardarNotas() {
        if (jtMaterias.isEditing()) {
            jtMaterias.getCellEditor().stopCellEditing();
        }

        int alumnoIndex = jcbAlumno.getSelectedIndex();
        if (alumnoIndex < 0) {
            JOptionPane.showMessageDialog(this, "Seleccione un alumno");
            return;
        }

        Alumno alumno = alumnoData.obtenerTodosLosAlumnos().get(alumnoIndex);
        DefaultTableModel modelo = (DefaultTableModel) jtMaterias.getModel();

        for (int i = 0; i < modelo.getRowCount(); i++) {
            int idMateria = (int) modelo.getValueAt(i, 0);
            Object valorNota = modelo.getValueAt(i, 2);

            if (valorNota != null && !valorNota.toString().trim().isEmpty()) {
                try {
                    double notaDouble = Double.parseDouble(valorNota.toString()); // toma exactamente lo escrito
                    int nota = (int) notaDouble; // si la columna es int
                    Inscripcion inscripcion = buscarInscripcion(alumno.getIdAlumno(), idMateria);
                    if (inscripcion != null) {
                        inscripcion.setNota(nota);
                        inscripcionData.actualizarNota(inscripcion);
                    }
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this,
                            "Nota inv√°lida en la fila " + (i + 1) + ": " + valorNota);
                }
            }

        }

        JOptionPane.showMessageDialog(this, "Notas guardadas correctamente");

        // Recargar tabla para verificar
        cargarMateriasConNotas();
    }

    private Inscripcion buscarInscripcion(int idAlumno, int idMateria) {
        List<Inscripcion> inscripciones = inscripcionData.obtenerTodasLasInscripciones();
        for (Inscripcion inscripcion : inscripciones) {
            System.out.println("Inscripcion cargada: Alumno=" + inscripcion.getAlumno().getIdAlumno()
                    + " Materia=" + inscripcion.getMateria().getIdMateria()
                    + " IDInscripto=" + inscripcion.getIdInscripto());
            if (inscripcion.getAlumno().getIdAlumno() == idAlumno
                    && inscripcion.getMateria().getIdMateria() == idMateria) {
                return inscripcion;
            }
        }
        return null;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbGuardarCambios;
    private javax.swing.JComboBox<String> jcbAlumno;
    private javax.swing.JTable jtMaterias;
    // End of variables declaration//GEN-END:variables
}
